function [reflectance, transmittance, absorptance] = ABM(azimuthalI, polarI, wavelength, nSamples)
    %Some lookup tables, should save to matlab file
    chlorophyllSACLookup = [
        73400 67700 62300 58000 55600 53400 52700 52200 ...
		51000 49400 46700 44400 43500 43500 43000 42600 ...
		42100 41300 40000 37900 34800 30700 26500 22100 ...
		18300 15400 13600 12700 12200 12000 11800 11800 ...
		12200 13000 14200 15600 16800 17800 18500 18900 ...
		19200 19800 20700 21900 22900 23400 23600 24000 ... 
		25300 27400 29400 30600 32700 36100 38900 40500 ...
		40300 36900 28200 19100 12600
    ] / 10; %cm^2/g
    chlorophyllSACWavelengthLookup = 400e-9:5e-9:700e-9;
    
    proteinSACLookup = [1.992, 1.992];
    proteinSACWavelengthLookup = 400e-9:5e-9:405e-9;
    
    celluloseLinginSACLookup = [0.876, 0.876];
    celluloseLinginSACWavelengthLookup = 400e-9:5e-9:405e-9;
    
    caretonoidSACLookup = [
		 6535.506923  7207.118815  8017.169001  8559.258518 ...
		 9328.970969  9942.106999 10669.577847 11562.119164 ...
		11975.755432 12370.904604 12843.907698 13162.723765 ...
		13594.276407 14057.034526 14381.579285 14550.187782 ...
		14490.659508 14248.260257 13773.149034 13667.762322 ...
		13620.968781 13177.895459 12539.340804 10989.320278 ...
		 8895.380246  6936.325813  4544.066850  3170.884351 ...
		 2333.883282  1824.555971  1519.712737  1309.073662 ...
		 1164.526320  1068.505480  1011.292774   958.240154 ...
		  958.240154   958.240154   947.933115   921.314601 ...
		  901.556158   883.250517   875.085062   875.085062 ...
		  873.419624   867.527208   861.634792   855.742376 ...
		  849.849960   843.957544   838.065128   834.592308 ...
		  841.777197   848.962085   856.146973   863.331861 ...
		  870.516749   881.011273   897.284130   913.556987 ...
		  894.049970
    ]  / 10; %cm^2/g

    caretonoidSACWavelengthLookup = 400e-9:5e-9:700e-9;
    
    waterSACLookup = [
        0.000066 0.000053 0.000047 0.000044 ...
		0.000045 0.000048 0.000049 0.000053 ...
		0.000063 0.000075 0.000092 0.000096 ...
		0.000098 0.000101 0.000106 0.000114 ...
		0.000127 0.000136 0.000150 0.000173 ...
		0.000204 0.000256 0.000325 0.000396 ...
		0.000409 0.000417 0.000434 0.000452 ...
		0.000474 0.000511 0.000565 0.000596 ...
		0.000619 0.000642 0.000695 0.000772 ...
		0.000896 0.001100 0.001351 0.001672 ... 
		0.002224 0.002577 0.002644 0.002678 ...
		0.002755 0.002834 0.002916 0.003012 ...
		0.003108 0.003250 0.003400 0.003710 ...
		0.004100 0.004290 0.004390 0.004480 ...
		0.004650 0.004860 0.005160 0.005590 ...
		0.006240
    ] * 100;

    waterSACWavelengthLookup = 400e-9:5e-9:700e-9;
    
    refractiveIndexWaterLookup = [
    	1.346 1.345 1.344 1.343 1.342 1.341 1.340 1.339 ...
		1.338 1.338 1.337 1.336 1.336 1.335 1.335 1.334 ...
		1.334 1.334 1.334 1.333 1.333 1.333 1.333 1.333 ...
		1.333 1.333 1.333 1.333 1.333 1.333 1.333 1.333 ... 
		1.333 1.333 1.333 1.333 1.333 1.333 1.333 1.333 ...
		1.333 1.333 1.333 1.333 1.333 1.332 1.332 1.332 ...
		1.332 1.332 1.332 1.332 1.332 1.332 1.332 1.332 ...
		1.332 1.332 1.332 1.332 1.332
    ];

    refractiveIndexWaterWavelengthLookup = 400e-9:5e-9:700e-9;

    refractiveIndexCuticleLookup = [
        1.539712 1.539678 1.537372 1.536209 ...
		1.534937 1.533561 1.532009 1.530511 ...
		1.529224 1.528078 1.527108 1.526012 ...
		1.524844 1.523591 1.522421 1.521544 ...
		1.520067 1.519138 1.518554 1.517828 ...
		1.517050 1.516272 1.515421 1.514547 ...
		1.513748 1.513030 1.512445 1.511623 ...
		1.510911 1.510230 1.509549 1.508952 ...
		1.508368 1.507785 1.507203 1.506620 ...
		1.505908 1.505078 1.504297 1.503139 ...
		1.502896 1.502662 1.502248 1.501666 ...
		1.501087 1.500568 1.500049 1.499530 ... 
		1.499011 1.498409 1.497752 1.497096 ...
		1.496439 1.495974 1.495609 1.495244 ...
		1.494879 1.494510 1.494139 1.493768 ...
		1.493398
    ];

    refractiveIndexCuticleWavelengthLookup = 400e-9:5e-9:700e-9;
    
    
    
    %ABM-B
    %Sample derived parameters
    sampleParameters = struct(...
        'cuticleUndulationsAspectRatio', 5.0, ...
        'epidermisCellCapsAspectRatio',  5.0, ...
        'palisadeCellCapsAspectRatio',   1.0, ...
        'spongyCellCapsAspectRatio',     5.0, ...
        'wholeLeafThickness',            1.66e-4, ...
        'dryBulkDensity', 1.19e-5 / (4.1e-4 * 1.66e-4), ...
        'airVolumeFraction', 0.31, ...
        'proteinFraction', 0.0, ...
        'celluloseFraction', 0.0, ...
        'ligninFraction', 0.0, ...
        'antidermalScattererFraction', 0.3872, ...
        'mesophyllScattererFraction', 0.3872, ...
        'chlorophyllAConcentration', 3.978, ...
        'chlorophyllBConcentration', 1.161, ...
        'carotenoidMesophyllConcentration', 1.32 ...
    );

    interpolationMethod = 'linear';

    dryMatterConcentration = sampleParameters.dryBulkDensity / ...
        (1 - sampleParameters.airVolumeFraction);
    
    
    proteinConcentration     = dryMatterConcentration * ...
        sampleParameters.proteinFraction;
    celluloseConcentration   = dryMatterConcentration * ...
        sampleParameters.celluloseFraction;
    linginConcentration      = dryMatterConcentration * ...
        sampleParameters.ligninFraction;
    
    proteinSAC = interp1(proteinSACWavelengthLookup, proteinSACLookup, wavelength, ...
        interpolationMethod, 'extrap');
    
    celluloseLinginSAC = interp1(celluloseLinginSACWavelengthLookup, celluloseLinginSACLookup, ...
        wavelength, interpolationMethod, 'extrap');
    
    proteinAbsorptionCoefficient   = proteinConcentration * proteinSAC;
    celluloseAbsorptionCoefficient = celluloseConcentration * celluloseLinginSAC;
    linginAbsorptionCoefficient    = linginConcentration * celluloseLinginSAC;
    chlorophyllAbsorption = ...
        (sampleParameters.chlorophyllAConcentration + ...
         sampleParameters.chlorophyllBConcentration) * ...
         interp1(chlorophyllSACWavelengthLookup, chlorophyllSACLookup, wavelength, ...
              interpolationMethod, 'extrap');
     
    cartenoidsAbsorption = sampleParameters.carotenoidMesophyllConcentration * ...
         interp1(caretonoidSACWavelengthLookup, caretonoidSACLookup, wavelength, ...
            interpolationMethod, 'extrap');
    
    waterAbsorption = interp1(waterSACWavelengthLookup, waterSACLookup, wavelength, ...
            interpolationMethod, 'extrap');
        
    mesophyllAbsorption = chlorophyllAbsorption + cartenoidsAbsorption + ...
        proteinAbsorptionCoefficient + celluloseAbsorptionCoefficient + ...
        linginAbsorptionCoefficient + waterAbsorption;
     
    refractiveIndexCuticle =  ...
        interp1(refractiveIndexCuticleWavelengthLookup, refractiveIndexCuticleLookup, ...
            wavelength,	interpolationMethod, 'extrap');
        
    refractiveIndexWater = ...
         interp1(refractiveIndexWaterWavelengthLookup, refractiveIndexWaterLookup, ...
            wavelength,	interpolationMethod, 'extrap');
         
    
    refractiveIndexAir = 1;
    refractiveIndexMesophyll = 1.415;
    refractiveIndexAntidermalWall = (1 - sampleParameters.antidermalScattererFraction) * ...
        refractiveIndexWater + 1.535 * sampleParameters.antidermalScattererFraction;
    
    
    %Interfaces Declaration
    interface = struct(...
        'n1', 1, ...
        'n2', 1, ...
        'perturbanceDownTop', inf, ...
        'perturbanceDownBottom', inf, ...
        'perturbanceUpTop', inf, ...
        'perturbanceUpBottom', inf, ...
        'thickness', 0, ...
        'absorptionCoefficient', 0 ...
    );

    %Interfaces for ABM-B

    airCuticle = interface;
    airCuticle.n1 = refractiveIndexAir;
    airCuticle.n2 = refractiveIndexCuticle;
    airCuticle.perturbanceDownTop    = sampleParameters.cuticleUndulationsAspectRatio;
    airCuticle.perturbanceDownBottom = sampleParameters.epidermisCellCapsAspectRatio;
    airCuticle.perturbanceUpBottom   = sampleParameters.epidermisCellCapsAspectRatio;
    
    
    epidermisMesophyll = interface;
    epidermisMesophyll.n1 = refractiveIndexCuticle;
    epidermisMesophyll.n2 = refractiveIndexMesophyll;
    epidermisMesophyll.perturbanceDownTop     = sampleParameters.epidermisCellCapsAspectRatio;
    epidermisMesophyll.perturbanceUpTop       = epidermisMesophyll.perturbanceDownTop;
    epidermisMesophyll.perturbanceDownBottom  = sampleParameters.palisadeCellCapsAspectRatio;
    epidermisMesophyll.perturbanceUpBottom    = epidermisMesophyll.perturbanceDownBottom;
    epidermisMesophyll.thickness              = 0.5 * sampleParameters.wholeLeafThickness; %Bifacial ratio
    epidermisMesophyll.absorptionCoefficient  = mesophyllAbsorption;
    
    mesophyllAir = interface;
    mesophyllAir.n1 = refractiveIndexMesophyll;
    mesophyllAir.n2 = refractiveIndexAir;
    mesophyllAir.perturbanceDownTop    = sampleParameters.palisadeCellCapsAspectRatio;
    mesophyllAir.perturbanceUpTop      = mesophyllAir.perturbanceDownTop;
    mesophyllAir.perturbanceDownBottom = sampleParameters.spongyCellCapsAspectRatio;
    mesophyllAir.perturbanceUpBottom   = mesophyllAir.perturbanceDownBottom;
    
    
    airAntidermalWall = interface;
    airAntidermalWall.n1 = refractiveIndexAir;
    airAntidermalWall.n2 = refractiveIndexAntidermalWall;
    
    antidermalWallCuticle = interface;
    antidermalWallCuticle.n1 = refractiveIndexAntidermalWall;
    antidermalWallCuticle.n2 = refractiveIndexCuticle;
    antidermalWallCuticle.perturbanceDownBottom = sampleParameters.epidermisCellCapsAspectRatio;
    antidermalWallCuticle.perturbanceUpBottom = antidermalWallCuticle.perturbanceDownBottom;
    
    cuticleAir = interface;
    cuticleAir.n1 = refractiveIndexCuticle;
    cuticleAir.n2 = refractiveIndexAir;
    cuticleAir.perturbanceDownTop  = sampleParameters.epidermisCellCapsAspectRatio;
    cuticleAir.perturbanceUpTop    = cuticleAir.perturbanceDownTop;
    cuticleAir.perturbanceUpBottom = sampleParameters.cuticleUndulationsAspectRatio;
    
    
    interfaceArray = repmat(airCuticle, 1, 6);
    interfaceArray(1) = airCuticle;
    interfaceArray(2) = epidermisMesophyll;
    interfaceArray(3) = mesophyllAir;
    interfaceArray(4) = airAntidermalWall;
    interfaceArray(5) = antidermalWallCuticle;
    interfaceArray(6) = cuticleAir;
    
    startState = 1;
    endState = 7;
    absorbedState = 8;
    
    numTransmitted = 0;
    numReflected   = 0;
    numAbsorbed    = 0;
    
    %Start loop
    for i = 1:nSamples
        [x,y,z] = sph2cart(azimuthalI, polarI, 1);
        direction = [x,y,z];
        direction = direction / norm(direction);
        state = startState;

        [state, direction] = step(state, direction);
        while(state ~= endState && state ~= 1 && state ~= absorbedState)
            [state, direction] = step(state, direction);
        end
        
        numReflected   = numReflected    + sum(state == startState);
        numTransmitted = numTransmitted + sum(state == endState);
        numAbsorbed    = numAbsorbed     + sum(state == absorbedState);
    end
    
    reflectance   = numReflected / nSamples;
    transmittance = numTransmitted / nSamples;
    absorptance   = numAbsorbed / nSamples;
    
    function [outState, outVector] = step(state, vector)
        interface = interfaceArray(state);
          
        if vector(3) < 0 
            normal = [0,0,1];
            n1 = interface.n1;
            n2 = interface.n2;
            perturbanceReflect = interface.perturbanceDownTop;
            perturbanceRefract = interface.perturbanceDownBottom;
            refractState = state + 1;
        else
            normal = [0,0,-1];
            n1 = interface.n2;
            n2 = interface.n1;
            perturbanceReflect = interface.perturbanceUpBottom;
            perturbanceRefract = interface.perturbanceUpTop;
            refractState = state - 1;
        end
        
        %Check that we aren't absorbed here
        freeLength = freePathLength(vector, normal, interface.absorptionCoefficient);
        if freeLength < interface.thickness
            outState = absorbedState;
            outVector = [0 0 0];
        else
            R = fresnelCoefficient(vector, normal, n1, n2);
            if rand() < R
                outState = state;
                outVector = brakkeScattering(reflect(vector, normal), perturbanceReflect);
            else
                outState  = refractState;
                outVector = brakkeScattering(refract(vector, normal, n1, n2), perturbanceRefract);
            end
            
        end                 
    end

    function [length] = freePathLength(vector, normal, absorptionCoefficient)
        cosI   = -dot(vector,normal);
        length = -(1/absorptionCoefficient)*log(rand)*cosI;
    end
end

